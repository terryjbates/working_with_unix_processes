When resources are not closed, number of file descriptors increases. Limit is imposed on processes by kernel.


Update to Ruby 1.9
```
https://leonard.io/blog/2012/05/installing-ruby-1-9-3-on-ubuntu-12-04-precise-pengolin/

sudo apt-get update

sudo apt-get install ruby1.9.1 ruby1.9.1-dev \
  rubygems1.9.1 irb1.9.1 ri1.9.1 rdoc1.9.1 \
  build-essential libopenssl-ruby1.9.1 libssl-dev zlib1g-dev

sudo update-alternatives --install /usr/bin/ruby ruby /usr/bin/ruby1.9.1 400 \
         --slave   /usr/share/man/man1/ruby.1.gz ruby.1.gz \
                        /usr/share/man/man1/ruby1.9.1.1.gz \
        --slave   /usr/bin/ri ri /usr/bin/ri1.9.1 \
        --slave   /usr/bin/irb irb /usr/bin/irb1.9.1 \
        --slave   /usr/bin/rdoc rdoc /usr/bin/rdoc1.9.1

# choose your interpreter
# changes symlinks for /usr/bin/ruby , /usr/bin/gem
# /usr/bin/irb, /usr/bin/ri and man (1) ruby
sudo update-alternatives --config ruby
sudo update-alternatives --config gem

# now try
ruby --version
```

#Finding Limits


##Ruby
```
irb(main):001:0>  p Process.getrlimit(:NOFILE)
[1024, 4096]
=> [1024, 4096]
irb(main):002:0> 
````
We asked for max # of open files for symbol :NOFILE, returns a two element array.

First element, 1024, is soft limit for # of file descriptors
Second elemen, 4096, is hard limit for file descriptors

Exceed the soft limit, == exception raised, but can be modified
Process::RLIMIT_INFINITY 

##Python
```
import resource
resource.getrlimit(resource.RLIMIT_NOFILE) 

Bump the Soft Limit

irb(main):002:0>  p Process.setrlimit(:NOFILE, 4096)                            
nil
=> nil
irb(main):003:0>  p Process.getrlimit(:NOFILE)                                  
[4096, 4096]
=> [4096, 4096]
irb(main):004:0> 
```
We can increase the soft limit with common pattern:

##Ruby
```
Process.setrlimit(:NOFILE, Process.getrlimit(:NOFILE)[1])
```

##Python
```
resource.setrlimit(resource.RLIMIT_NOFILE,(resource.getrlimit(resource.RLIMIT_NOFILE)[1],resource.getrlimit(resource.RLIMIT_NOFILE)[1]))  
```
Lowering hard limits is irreversible.

#Other Resources

##Ruby
```
# The maximum number of simultaneous processes
# allowed for the current user.
Process.getrlimit(:NPROC)

# The largest size file that may be created.
Process.getrlimit(:FSIZE)

# The maximum size of the stack segment of the
# process.
Process.getrlimit(:STACK) 
```
##Python

resource.getrlimit(resource.RLIMIT_NOFILE)
resource.getrlimit(resource.RLIMIT_NPROC)
resource.getrlimit(resource.RLIMIT_FSIZE)
resource.getrlimit(resource.RLIMIT_STACK)

#Real World

Need to modify limits on resources uncommon. Ex: 5000 concurrent connections for simultaneous # of network connections (httperf)
Limits on 3rd-party code

#System Calls
Process.getrlimit
Process.setrlimit map to getrlimit(2) and setrlimit(2)


